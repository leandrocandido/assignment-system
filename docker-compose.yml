version: '3.8'

x-common-variables: &common-variables
  POSTGRES_USER: ${POSTGRES_USER:-postgres}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
  POSTGRES_HOST: postgres
  POSTGRES_PORT: 5432
  RABBITMQ_USER: ${RABBITMQ_USER:-guest}
  RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-guest}
  RABBITMQ_HOST: rabbitmq
  RABBITMQ_PORT: 5672
  RABBITMQ_VHOST: /
  REDIS_HOST: redis
  REDIS_PORT: 6379
  NODE_ENV: ${NODE_ENV:-development}

services:
  web-app:
    build:
      context: ./services/web-app
      dockerfile: Dockerfile
    ports:
      - "${WEB_APP_PORT:-3001}:3001"
    environment:
      <<: *common-variables
      PORT: 3001
      SESSION_TTL: ${SESSION_TTL:-1200}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      relay-service:
        condition: service_started
      assignment-service:
        condition: service_started
    restart: unless-stopped

  relay-service:
    build:
      context: .
      dockerfile: services/relay-service/Dockerfile
    environment:
      <<: *common-variables
      POSTGRES_DB: ${POSTGRES_DB_RELAY:-relay_service}
      CRON_EXPRESSION: ${CRON_EXPRESSION:-"*/15 * * * * *"}
      EVENT_LIMIT: ${EVENT_LIMIT:-10}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  assignment-service:
    build:
      context: .
      dockerfile: services/assignment-service/Dockerfile
    environment:
      <<: *common-variables
      POSTGRES_DB: ${POSTGRES_DB_ASSIGNMENT:-assignment_service}
      SESSION_TTL: ${SESSION_TTL:-1200}
      MAX_ASSIGNMENTS: ${MAX_ASSIGNMENTS:-50}
    ports:
      - "${ASSIGNMENT_SERVICE_PORT:-3000}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  event-generator:
    build:
      context: ./scripts
      dockerfile: Dockerfile
    environment:
      <<: *common-variables
      POSTGRES_DB_RELAY: ${POSTGRES_DB_RELAY:-relay_service}
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - tools
    command: ["node", "generateEvents.js"]

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_MULTIPLE_DATABASES=${POSTGRES_DB_RELAY:-relay_service},${POSTGRES_DB_ASSIGNMENT:-assignment_service}
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
      - ./init/postgres:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-guest}
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  task-admin:
    build:
      context: ./services/task-admin
      dockerfile: Dockerfile
    environment:
      <<: *common-variables
      POSTGRES_DB: ${POSTGRES_DB_ASSIGNMENT:-assignment_service}
      INACTIVE_USER_CRON: ${INACTIVE_USER_CRON:-*/15 * * * * *}
      EXPIRED_EVENT_CRON: ${EXPIRED_EVENT_CRON:-*/15 * * * * *}
      CHECK_REVIEWED_CRON: ${CHECK_REVIEWED_CRON:-*/15 * * * * *}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

volumes:
  rabbitmq_data:
  redis_data: 